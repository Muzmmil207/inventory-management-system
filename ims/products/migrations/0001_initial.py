# Generated by Django 4.1.3 on 2022-12-10 07:20

import ckeditor.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import mptt.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Address",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "full_name",
                    models.CharField(max_length=150, verbose_name="Full Name"),
                ),
                ("phone", models.CharField(max_length=50, verbose_name="Phone Number")),
                ("postcode", models.CharField(max_length=50, verbose_name="Postcode")),
                (
                    "address_line",
                    models.CharField(max_length=255, verbose_name="Address Line 1"),
                ),
                (
                    "address_line2",
                    models.CharField(max_length=255, verbose_name="Address Line 2"),
                ),
                (
                    "town_city",
                    models.CharField(max_length=150, verbose_name="Town/City/State"),
                ),
                (
                    "delivery_instructions",
                    models.CharField(
                        max_length=255, verbose_name="Delivery Instructions"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated at"),
                ),
            ],
            options={
                "verbose_name": "Address",
                "verbose_name_plural": "Addresses",
            },
        ),
        migrations.CreateModel(
            name="Brand",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The brand name to be displayed on the Inventory.",
                        max_length=100,
                        verbose_name="Title",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="format: required, max-100",
                        max_length=100,
                        verbose_name="category name",
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="format: required, letters, numbers, underscore, or hyphens",
                        max_length=150,
                        verbose_name="category safe URL",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "content",
                    models.TextField(
                        help_text="The column used to store the category details.",
                        max_length=150,
                        verbose_name="category safe URL",
                    ),
                ),
                ("lft", models.PositiveIntegerField(editable=False)),
                ("rght", models.PositiveIntegerField(editable=False)),
                ("tree_id", models.PositiveIntegerField(db_index=True, editable=False)),
                ("level", models.PositiveIntegerField(editable=False)),
                (
                    "parent",
                    mptt.fields.TreeForeignKey(
                        blank=True,
                        help_text="format: not required",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="children",
                        to="products.category",
                        verbose_name="parent of category",
                    ),
                ),
            ],
            options={
                "verbose_name": "product category",
                "verbose_name_plural": "product categories",
            },
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The product name to be displayed on the Inventory.",
                        max_length=100,
                        verbose_name="Name",
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="format: required, letters, numbers, underscore, or hyphens",
                        max_length=150,
                        verbose_name="Product safe URL",
                    ),
                ),
                (
                    "summary",
                    models.TextField(
                        blank=True,
                        help_text="The summary to mention the key highlights.",
                        max_length=100,
                        null=True,
                        verbose_name="Summary",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "content",
                    ckeditor.fields.RichTextField(
                        help_text="The column used to store the additional details of the product.",
                        max_length=1000,
                        verbose_name="Content",
                    ),
                ),
                (
                    "category",
                    mptt.fields.TreeManyToManyField(
                        related_query_name="category", to="products.category"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ProductType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="format: required, max-100",
                        max_length=100,
                        verbose_name="category name",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Supplier",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Supplier name.", max_length=100, verbose_name="Name"
                    ),
                ),
                (
                    "mobile_number",
                    models.CharField(
                        max_length=20,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be entered in the format: `+24901XXXXXXXX`.",
                                regex="^(?:\\+249|0)?(01\\d{8})$",
                            )
                        ],
                        verbose_name="Mobile Number",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        error_messages={
                            "unique": "Please use another Email, this is already exists."
                        },
                        max_length=254,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Email must be entered in the format: `abc@abc.com`.",
                                regex="^[A-z0-9\\.]+@[A-z0-9]+\\.(com|net|org|info)$",
                            )
                        ],
                        verbose_name="E-mail",
                    ),
                ),
                ("other_details", models.CharField(max_length=1000)),
                (
                    "address",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="products.address",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ProductInventory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sku",
                    models.CharField(
                        help_text="The id to identify the item on stock.",
                        max_length=100,
                        verbose_name="Stock Keeping Unit",
                    ),
                ),
                (
                    "mrp",
                    models.FloatField(
                        help_text="The printed price of the product associated with the item.",
                        verbose_name="Maximum Retail Price",
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        error_messages={
                            "name": {
                                "max_length": "the price must be between 0 and 999.99."
                            }
                        },
                        help_text="The price at which the product was purchased.",
                        max_digits=5,
                        verbose_name="price",
                    ),
                ),
                (
                    "discount",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        error_messages={
                            "name": {
                                "max_length": "the price must be between 0 and 999.99."
                            }
                        },
                        help_text="The discount is given by the supplier.",
                        max_digits=5,
                        verbose_name="Discount",
                    ),
                ),
                (
                    "quantity",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="The total quantity received at the inventory.ier.",
                        verbose_name="quantity",
                    ),
                ),
                (
                    "sold",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="The total quantity sold to the customers.",
                        verbose_name="sold",
                    ),
                ),
                (
                    "available",
                    models.IntegerField(
                        default=0,
                        help_text="The quantity that is available on the stock.",
                        verbose_name="Available",
                    ),
                ),
                (
                    "defective",
                    models.IntegerField(
                        help_text="The total defective items either received at the inventory or returned by the customers.",
                        verbose_name="Defective",
                    ),
                ),
                (
                    "brand",
                    models.ForeignKey(
                        help_text="The brand id to identify the brand associated with the inventory item.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="brand_inventory",
                        to="products.brand",
                        verbose_name="Brand",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        help_text="The product id to identify the product associated with the inventory item.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="product_inventory",
                        to="products.product",
                        verbose_name="Product",
                    ),
                ),
                (
                    "supplier",
                    models.ForeignKey(
                        help_text="The supplier id to identify the supplier associated with the inventory item.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="supplier_inventory",
                        to="products.supplier",
                        verbose_name="Supplier",
                    ),
                ),
            ],
            options={
                "verbose_name": "Product Inventory",
                "verbose_name_plural": "Products Inventory",
            },
        ),
        migrations.AddField(
            model_name="product",
            name="type",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="product_type",
                to="products.producttype",
            ),
        ),
        migrations.CreateModel(
            name="Media",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        default="images/default.png",
                        help_text="format: required, default-default.png",
                        upload_to="images/",
                        verbose_name="product image",
                    ),
                ),
                (
                    "alt_text",
                    models.CharField(
                        help_text="format: required, max-255",
                        max_length=255,
                        verbose_name="alternative text",
                    ),
                ),
                (
                    "is_feature",
                    models.BooleanField(
                        default=False,
                        help_text="format: default=false, true=default image",
                        verbose_name="product default image",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="format: Y-m-d H:M:S",
                        verbose_name="product visibility",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="format: Y-m-d H:M:S",
                        verbose_name="date sub-product created",
                    ),
                ),
                (
                    "product_inventory",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="media_product_inventory",
                        to="products.productinventory",
                    ),
                ),
            ],
            options={
                "verbose_name": "product image",
                "verbose_name_plural": "product images",
            },
        ),
    ]
